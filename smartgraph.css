/*
STYLESHEET FOR SMARTGRAPH VISUALIZATION.

For your customization, please see:
https://openjfx.io/javadoc/19/javafx.graphics/javafx/scene/doc-files/cssref.html

And know that:
- The drawing area itself is of type Pane, which is an extension of Region;
- A vertex is of type Shape;
- The edges are of type Line and CubicLine;
- The labels are of type Text, and;
- The arrows are of type Path.

This should help you understand which styles you can apply.
*/

.graph {
    -fx-background-color: #fff;
}

.vertex {
    -fx-stroke-width: 3;
    -fx-stroke: #61B5F1;
    -fx-stroke-type: inside; /* you should keep this if using arrows */
    -fx-fill: #B1DFF7;
}

.vertex:hover { /* pseudo-classes also work */
    /*-fx-cursor: default; */ /* You can use this style to override the hand/move cursors while hovering. */
    -fx-stroke-width: 4;
}

.vertex-label {
    -fx-font: bold 10pt "sans-serif";
}

.edge {
    -fx-stroke-width: 2;
    -fx-stroke: #FF6D66;  
    /* -fx-stroke-dash-array: 2 5 2 5; /* remove for clean lines */
    -fx-fill: transparent; /* important to keep for curved edges */
    -fx-stroke-line-cap: round;
    -fx-opacity: 0.8;
}

.edge:hover {
    -fx-stroke-width: 3;
    -fx-cursor: hand;
}

.edge-label {
    -fx-font: normal 10pt "sans-serif";
    -fx-background-color: white;
}

/* Since version 2.0.0-rc2 this style is cumulatively applied to arrows, after the "edge" class.
 * Use to, e.g., to remove the dash effect (that will not look good in arrows).
 * Afterwards, styles applied to the edges are propagated to the respective arrows. You can, however, apply
 * specific styles to the arrows programmatically. See example programs.
 */
.arrow {
    -fx-stroke-dash-array: none;
}

/* Custom vertex class. If you use node.setStyleClass("myVertex"), any previous styling
 * will be overwritten. If you use node.addStyleClass("myVertex"), the styles are applied
 * cumulatively; in the later case, any properties not wanted from the default "vertex" class
 * must be overwritten.
 */
.myVertex {
    -fx-stroke-width: 4;
    -fx-stroke: green;
    -fx-stroke-type: inside; /* you should keep this if using arrows */
    -fx-fill: yellowgreen;
}

/* Custom edge class. The same above logic applies to edges.
 */
.myEdge {
    -fx-stroke-width: 2;
    -fx-stroke: red;
    -fx-opacity: 1;
    -fx-fill: transparent; /* important to keep for curved edges */
}